/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sys_prototype_revised;


import java.awt.Toolkit;
import javax.swing.JOptionPane;
import java.awt.event.WindowEvent;
import java.awt.Component;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;
import javax.swing.table.DefaultTableModel;
import javax.swing.SwingUtilities;


public class WORKER_DB_FOR_EDIT extends javax.swing.JFrame {
        private String username;
        private Connection Dbcon;

        private String sUrl = "jdbc:mysql://localhost:3306/user_" + username;
        private String sUser = "root";
        private String spass = "";
        
        
        private static PreparedStatement pst;
        private static ResultSet result;
        

        
    public WORKER_DB_FOR_EDIT(String username, Connection Dbcon) {
        
        this.username = username;
        this.Dbcon = Dbcon;
        initComponents();
        SwingUtilities.invokeLater(this::connectLoadData);
    }

    private WORKER_DB_FOR_EDIT() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    public void close(){
        WindowEvent closeWindow = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        display_panel = new javax.swing.JPanel();
        search_text_field = new javax.swing.JTextField();
        worker_search_button = new javax.swing.JButton();
        record_table_scroll = new javax.swing.JScrollPane();
        record_table = new javax.swing.JTable();
        admin_forward = new javax.swing.JButton();
        worker_validate_button = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        worker_delete_button = new javax.swing.JButton();
        w_add_button = new javax.swing.JButton();
        worker_update_button = new javax.swing.JButton();
        show_data = new javax.swing.JButton();
        worker_label = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setSize(new java.awt.Dimension(1020, 550));

        jPanel2.setBackground(new java.awt.Color(220, 227, 238));
        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel2.setPreferredSize(new java.awt.Dimension(1020, 550));

        display_panel.setBackground(new java.awt.Color(247, 247, 247));
        display_panel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        display_panel.setForeground(new java.awt.Color(247, 247, 247));
        display_panel.setPreferredSize(new java.awt.Dimension(1000, 300));
        display_panel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                display_panelMouseWheelMoved(evt);
            }
        });

        search_text_field.setBackground(new java.awt.Color(76, 119, 102));
        search_text_field.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        search_text_field.setForeground(new java.awt.Color(235, 230, 224));
        search_text_field.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        search_text_field.setPreferredSize(new java.awt.Dimension(200, 25));
        search_text_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_text_fieldActionPerformed(evt);
            }
        });
        search_text_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search_text_fieldKeyReleased(evt);
            }
        });

        worker_search_button.setBackground(new java.awt.Color(76, 119, 102));
        worker_search_button.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        worker_search_button.setForeground(new java.awt.Color(235, 230, 224));
        worker_search_button.setText("SEARCH");
        worker_search_button.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        worker_search_button.setPreferredSize(new java.awt.Dimension(80, 25));
        worker_search_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                worker_search_buttonActionPerformed(evt);
            }
        });

        record_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Respondent Email", "First Name", "Last Name", "Address", "Contact Number", "HouseHold Serial", "Date Listed", "Entry Status"
            }
        ));
        record_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                record_tableMouseClicked(evt);
            }
        });
        record_table_scroll.setViewportView(record_table);
        if (record_table.getColumnModel().getColumnCount() > 0) {
            record_table.getColumnModel().getColumn(6).setResizable(false);
            record_table.getColumnModel().getColumn(7).setResizable(false);
        }

        javax.swing.GroupLayout display_panelLayout = new javax.swing.GroupLayout(display_panel);
        display_panel.setLayout(display_panelLayout);
        display_panelLayout.setHorizontalGroup(
            display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(display_panelLayout.createSequentialGroup()
                .addGroup(display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(display_panelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(search_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(worker_search_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(display_panelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(record_table_scroll)))
                .addGap(10, 10, 10))
        );
        display_panelLayout.setVerticalGroup(
            display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(display_panelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(worker_search_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(record_table_scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                .addContainerGap())
        );

        admin_forward.setBackground(new java.awt.Color(76, 119, 102));
        admin_forward.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        admin_forward.setForeground(new java.awt.Color(235, 230, 224));
        admin_forward.setText("FORWARD");
        admin_forward.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        admin_forward.setPreferredSize(new java.awt.Dimension(80, 25));
        admin_forward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                admin_forwardActionPerformed(evt);
            }
        });

        worker_validate_button.setBackground(new java.awt.Color(76, 119, 102));
        worker_validate_button.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        worker_validate_button.setForeground(new java.awt.Color(235, 230, 224));
        worker_validate_button.setText("VALIDATE");
        worker_validate_button.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        worker_validate_button.setPreferredSize(new java.awt.Dimension(80, 25));
        worker_validate_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                worker_validate_buttonActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(76, 119, 102));
        jButton2.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(235, 230, 224));
        jButton2.setText("<");
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.setPreferredSize(new java.awt.Dimension(30, 30));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        worker_delete_button.setBackground(new java.awt.Color(76, 119, 102));
        worker_delete_button.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        worker_delete_button.setForeground(new java.awt.Color(235, 230, 224));
        worker_delete_button.setText("DELETE");
        worker_delete_button.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        worker_delete_button.setPreferredSize(new java.awt.Dimension(80, 25));
        worker_delete_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                worker_delete_buttonActionPerformed(evt);
            }
        });

        w_add_button.setBackground(new java.awt.Color(76, 119, 102));
        w_add_button.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        w_add_button.setForeground(new java.awt.Color(235, 230, 224));
        w_add_button.setText("ADD NEW ENTRY");
        w_add_button.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        w_add_button.setPreferredSize(new java.awt.Dimension(80, 25));
        w_add_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                w_add_buttonActionPerformed(evt);
            }
        });

        worker_update_button.setBackground(new java.awt.Color(76, 119, 102));
        worker_update_button.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        worker_update_button.setForeground(new java.awt.Color(235, 230, 224));
        worker_update_button.setText("UPDATE");
        worker_update_button.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        worker_update_button.setPreferredSize(new java.awt.Dimension(80, 25));
        worker_update_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                worker_update_buttonActionPerformed(evt);
            }
        });

        show_data.setBackground(new java.awt.Color(76, 119, 102));
        show_data.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        show_data.setForeground(new java.awt.Color(235, 230, 224));
        show_data.setText("SHOW MORE");
        show_data.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        show_data.setPreferredSize(new java.awt.Dimension(80, 25));
        show_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                show_dataActionPerformed(evt);
            }
        });

        worker_label.setBackground(new java.awt.Color(247, 247, 247));
        worker_label.setFont(new java.awt.Font("Bahnschrift", 1, 24)); // NOI18N
        worker_label.setForeground(new java.awt.Color(40, 40, 40));
        worker_label.setText("HELLO WORKER");
        worker_label.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        worker_label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                worker_labelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(display_panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1008, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(413, 413, 413)
                                .addComponent(w_add_button, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(worker_update_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(worker_delete_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(worker_validate_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(admin_forward, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(show_data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(worker_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 6, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(worker_label))
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(show_data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(admin_forward, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(worker_validate_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(worker_delete_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(worker_update_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(w_add_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(display_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    public void UpdateDB(){
        
        String sUrl = "jdbc:mysql://localhost:3306/user_" + username;
        String sUser = "root";
        String spass = "";
        
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            Dbcon = DriverManager.getConnection(sUrl, sUser, spass);
            pst = Dbcon.prepareStatement("SELECT * FROM res_info ORDER BY time_created DESC");
            
            result = pst.executeQuery();
            ResultSetMetaData resultData = result.getMetaData();
            
            int q = resultData.getColumnCount();
            
            DefaultTableModel RecordTable = (DefaultTableModel)record_table.getModel();
            RecordTable.setRowCount(0);
            
            while(result.next()){
                Vector columnData = new Vector();
                
                for(int r = 1; r <= q; r++){
                    columnData.add(result.getString("respondent_email"));
                    columnData.add(result.getString("f_name"));
                    columnData.add(result.getString("l_name"));
                    columnData.add(result.getString("address"));
                    columnData.add(result.getString("contact_no"));
                    columnData.add(result.getString("household_serial"));
                    columnData.add(result.getString("date_listed"));
                    columnData.add(result.getString("validation"));
                    
                }
                RecordTable.addRow(columnData);
            }
        }
        catch (Exception ex){
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    public void showTableDb()throws SQLException{
        if(Dbcon == null || Dbcon.isClosed()){
            System.out.println("CHECK DATABASE CONNECTION");
            return;
        }
        String query = "SELECT * FROM res_info ORDER BY time_created DESC";
        try(PreparedStatement stmt = Dbcon.prepareStatement(query)){
            
            ResultSet result = stmt.executeQuery();
            
            DefaultTableModel RecordTable = (DefaultTableModel)record_table.getModel();
            RecordTable.setRowCount(0);
            
            
            
            while(result.next()){
                /*StringBuilder details = new StringBuilder();
                ResultSetMetaData metadata = result.getMetaData();
                int columnCount = metadata.getColumnCount();
                */
                String r_email = result.getString("respondent_email");
                String first_name = result.getString("f_name");
                String last_name = result.getString("l_name");
                String r_add = result.getString("address");
                String contact = result.getString("contact_no");
                String household_s = result.getString("household_serial");
                String lisiting_date = result.getString("date_listed");
                String w_valid = result.getString("validation");
                
                RecordTable.addRow(new Object[]{r_email, first_name,last_name, r_add, contact, household_s, lisiting_date, w_valid});
            }
        }catch (SQLException e){
            JOptionPane.showMessageDialog(this, "Error loading data" + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
        }     
    }

    public void connectLoadData(){
        try{
            connectToDB();
            showTableDb();
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE );
        }
    }
    
    public void connectToDB() throws SQLException{
        String SUrl = "jdbc:mysql://localhost:3306/user_" + username;
        String SUser = "root";
        String Spass = "";
        Dbcon = DriverManager.getConnection(SUrl, SUser, Spass);
    }
    
    private void showError(String message) {
         JOptionPane.showMessageDialog(new WORKER_DB_FOR_EDIT.JFrame(), message,"Error", JOptionPane.ERROR_MESSAGE);

    }
    
    private void search_text_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_text_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_search_text_fieldActionPerformed

    private void worker_search_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_worker_search_buttonActionPerformed

        DefaultTableModel RecordTable = (DefaultTableModel)record_table.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(RecordTable);
        record_table.setRowSorter(sorter);
        sorter.setRowFilter(RowFilter.regexFilter(search_text_field.getText()));

    }//GEN-LAST:event_worker_search_buttonActionPerformed

    private void worker_validate_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_worker_validate_buttonActionPerformed
            close();
            validation_process_PROTO v_UI = new validation_process_PROTO(username, Dbcon);
            v_UI.setVisible(true);
            v_UI.pack();
            v_UI.setLocationRelativeTo(null);
           
    }//GEN-LAST:event_worker_validate_buttonActionPerformed

    private void worker_update_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_worker_update_buttonActionPerformed
  
        int selectedRow = record_table.getSelectedRow();
        String sUrl = "jdbc:mysql://localhost:3306/user_" + username;
        String sUser = "root";
        String spass = "";

    if (selectedRow != -1) {  
        String email = record_table.getValueAt(selectedRow, 0).toString();

        String query = "SELECT * FROM res_info WHERE respondent_email = ? ORDER BY time_created DESC";

        try (Connection conn = DriverManager.getConnection(sUrl, sUser, spass);
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setString(1, email);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {  
                    Map<String, String> data = new HashMap<>();
                    data.put("FirstName", rs.getString("f_name"));
                    data.put("LastName", rs.getString("l_name"));
                    data.put("Address", rs.getString("address"));
                    data.put("Email", rs.getString("respondent_email"));
                    data.put("Contact", rs.getString("contact_no"));
                    data.put("Household", rs.getString("household_serial"));
                    data.put("Worker", rs.getString("worker_incharge"));
                    data.put("Suffix", rs.getString("suffix"));
                    data.put("M_name", rs.getString("m_name"));
                    data.put("Age", rs.getString("r_age"));
                    data.put("B_date", rs.getString("r_birthdate"));
                    data.put("B_place", rs.getString("r_birthplace"));
                    data.put("Religion", rs.getString("r_religion"));
                    data.put("Citizenship", rs.getString("r_citizenship"));
                    data.put("Profession", rs.getString("r_profession"));
                    data.put("Enumer", rs.getString("enumeration_serial"));
                    data.put("Build", rs.getString("building_serial"));
                    data.put("Housing", rs.getString("housing_unit_serial"));
                    
                    data.put("Sex", rs.getString("r_sex"));
                    data.put("Status", rs.getString("r_status"));
                    data.put("Attainment", rs.getString("r_attainment"));
                    data.put("Date_Added", rs.getString("time_created"));
                    data.put("Entry", rs.getString("validation"));
                    
                    close();
                    WORKER_UPDATE v_UI = new WORKER_UPDATE(username, Dbcon, data);
                    v_UI.setVisible(true);
                    v_UI.pack();
                    v_UI.setLocationRelativeTo(null);
                } else {
                    JOptionPane.showMessageDialog(null, "No data found for the selected email.");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error while retrieving data: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(null, "No row selected");
    }
    }//GEN-LAST:event_worker_update_buttonActionPerformed
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int a = JOptionPane.showConfirmDialog(this, "Are you sure you want to logout?", "LOGOUT", JOptionPane.YES_NO_OPTION);
        if(a == 0){
            close();
            Main_login_PROTOTYPE main_L = new Main_login_PROTOTYPE();
            main_L.setVisible(true);
            main_L.pack();
            main_L.setLocationRelativeTo(null);
            this.dispose();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void w_add_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_w_add_buttonActionPerformed
        close();
        WORKER_ADD main_L = new WORKER_ADD(username, Dbcon);
        main_L.setVisible(true);
        main_L.pack();
        main_L.setLocationRelativeTo(null);
        this.dispose();

    }//GEN-LAST:event_w_add_buttonActionPerformed
 

    private void admin_forwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_admin_forwardActionPerformed
        close();
        forward_process_PROTO forward_UI = new forward_process_PROTO(username, Dbcon);
        forward_UI.setVisible(true);
        forward_UI.pack();
        forward_UI.setLocationRelativeTo(null);
    }//GEN-LAST:event_admin_forwardActionPerformed

    private void worker_delete_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_worker_delete_buttonActionPerformed
   
        int[] selectedRows = record_table.getSelectedRows(); // Get all selected rows

        if (selectedRows.length > 0) {  // Check if at least one row is selected
            String sUrl = "jdbc:mysql://localhost:3306/user_" + username;
            String sUser = "root";
            String spass = "";

            try (Connection conn = DriverManager.getConnection(sUrl, sUser, spass)) {
                java.util.List<java.util.Map<String, String>> dataList = new java.util.ArrayList<>();

                for (int selectedRow : selectedRows) {
                    String email = record_table.getValueAt(selectedRow, 0).toString();

                    String query = "SELECT * FROM res_info WHERE respondent_email = ? ORDER BY time_created DESC";

                    try (PreparedStatement stmt = conn.prepareStatement(query)) {
                        stmt.setString(1, email);

                        try (ResultSet rs = stmt.executeQuery()) {
                            if (rs.next()) {  
                                Map<String, String> data = new HashMap<>();
                                data.put("FirstName", rs.getString("f_name"));
                                data.put("LastName", rs.getString("l_name"));
                                data.put("Address", rs.getString("address"));
                                data.put("Email", rs.getString("respondent_email"));
                                data.put("Contact", rs.getString("contact_no"));
                                data.put("Household", rs.getString("household_serial"));
                                data.put("Worker", rs.getString("worker_incharge"));
                                data.put("Suffix", rs.getString("suffix"));
                                data.put("M_name", rs.getString("m_name"));
                                data.put("Age", rs.getString("r_age"));
                                data.put("B_date", rs.getString("r_birthdate"));
                                data.put("B_place", rs.getString("r_birthplace"));
                                data.put("Religion", rs.getString("r_religion"));
                                data.put("Citizenship", rs.getString("r_citizenship"));
                                data.put("Profession", rs.getString("r_profession"));
                                data.put("Enumer", rs.getString("enumeration_serial"));
                                data.put("Build", rs.getString("building_serial"));
                                data.put("Housing", rs.getString("housing_unit_serial"));
                                data.put("Sex", rs.getString("r_sex"));
                                data.put("Status", rs.getString("r_status"));
                                data.put("Attainment", rs.getString("r_attainment"));
                                data.put("Date_Added", rs.getString("time_created"));
                                data.put("Entry", rs.getString("validation"));

                                // Add the map to the list
                                dataList.add(data);
                            } else {
                                JOptionPane.showMessageDialog(null, "No data found for the email: " + email);
                            }
                        }
                    }
                }

                // Pass dataList to the UI or process it as needed
                close();
                DELETE_PROCESS v_UI = new DELETE_PROCESS(username, Dbcon, dataList);
                v_UI.setVisible(true);
                v_UI.pack();
                v_UI.setLocationRelativeTo(null);

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error while retrieving data: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "No rows selected");
        }
   
        
        /*int selectedRow = record_table.getSelectedRow();
    String sUrl = "jdbc:mysql://localhost:3306/user_" + username;
    String sUser = "root";
    String spass = "";

    if (selectedRow != -1) {  
        String email = record_table.getValueAt(selectedRow, 0).toString();

        String query = "SELECT * FROM res_info WHERE respondent_email = ? ORDER BY time_created DESC";

        try (Connection conn = DriverManager.getConnection(sUrl, sUser, spass);
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setString(1, email);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {  
                    Map<String, String> data = new HashMap<>();
                    data.put("FirstName", rs.getString("f_name"));
                    data.put("LastName", rs.getString("l_name"));
                    data.put("Address", rs.getString("address"));
                    data.put("Email", rs.getString("respondent_email"));
                    data.put("Contact", rs.getString("contact_no"));
                    data.put("Household", rs.getString("household_serial"));
                    data.put("Worker", rs.getString("worker_incharge"));
                    data.put("Suffix", rs.getString("suffix"));
                    data.put("M_name", rs.getString("m_name"));
                    data.put("Age", rs.getString("r_age"));
                    data.put("B_date", rs.getString("r_birthdate"));
                    data.put("B_place", rs.getString("r_birthplace"));
                    data.put("Religion", rs.getString("r_religion"));
                    data.put("Citizenship", rs.getString("r_citizenship"));
                    data.put("Profession", rs.getString("r_profession"));
                    data.put("Enumer", rs.getString("enumeration_serial"));
                    data.put("Build", rs.getString("building_serial"));
                    data.put("Housing", rs.getString("housing_unit_serial"));
                    
                    data.put("Sex", rs.getString("r_sex"));
                    data.put("Status", rs.getString("r_status"));
                    data.put("Attainment", rs.getString("r_attainment"));
                    data.put("Date_Added", rs.getString("time_created"));
                    data.put("Entry: ", rs.getString("validation"));
                    

                    DELETE_PROCESS d_UI = new DELETE_PROCESS(username, Dbcon, data);
                    d_UI.setVisible(true);
                    d_UI.pack();
                    d_UI.setLocationRelativeTo(null);
                } else {
                    JOptionPane.showMessageDialog(null, "No data found for the selected email.");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error while retrieving data: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(null, "No row selected");
    }*/
    
        /*String sUrl = "jdbc:mysql://localhost:3306/user_" + username;
        String sUser = "root";
        String spass = "";
        
        DefaultTableModel RecordTable = (DefaultTableModel)record_table.getModel();
        int SelectedRows = record_table.getSelectedRow();
        
        try{
            String respondent_email = (String) RecordTable.getValueAt(SelectedRows, 0).toString();
            
            int deleteItem = JOptionPane.showConfirmDialog(null, "PLEASE CONFIRM IF YOU WANT TO DELETE AN ITEM", "WARNING", JOptionPane.YES_NO_OPTION);
            
            if(deleteItem == JOptionPane.YES_OPTION){
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection Dbcon = DriverManager.getConnection(sUrl, sUser, spass);
                pst = Dbcon.prepareStatement("DELETE FROM res_info WHERE respondent_email = ?");
                
                pst.setString(1, respondent_email);
                pst.executeUpdate();
            
                UpdateDB();
                showTableDb();
                JOptionPane.showMessageDialog(this, "Respondent is now Successfully deleted from the record");
                
            }
        }
        catch(ClassNotFoundException ex){
            java.util.logging.Logger.getLogger(WORKER_DB_FOR_EDIT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }catch(SQLException ex){
            System.err.println(ex);
        }*/
    }//GEN-LAST:event_worker_delete_buttonActionPerformed

    private void search_text_fieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_text_fieldKeyReleased
        
        DefaultTableModel RecordTable = (DefaultTableModel)record_table.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(RecordTable);
        record_table.setRowSorter(sorter);
        sorter.setRowFilter(RowFilter.regexFilter(search_text_field.getText()));
        
    }//GEN-LAST:event_search_text_fieldKeyReleased

    private void display_panelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_display_panelMouseWheelMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_display_panelMouseWheelMoved

    private void show_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_show_dataActionPerformed
        int selectedRow = record_table.getSelectedRow();
        String sUrl = "jdbc:mysql://localhost:3306/user_" + username;
        String sUser = "root";
        String spass = "";

        if (selectedRow != -1) {  
            String email = record_table.getValueAt(selectedRow, 0).toString();

            String query = "SELECT * FROM res_info WHERE respondent_email = ? ORDER BY time_created DESC";

            try (Connection conn = DriverManager.getConnection(sUrl, sUser, spass);
                 PreparedStatement stmt = conn.prepareStatement(query)) {

                stmt.setString(1, email);

                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {  
                        Map<String, String> data = new HashMap<>();
                        data.put("FirstName", rs.getString("f_name"));
                        data.put("LastName", rs.getString("l_name"));
                        data.put("Address", rs.getString("address"));
                        data.put("Email", rs.getString("respondent_email"));
                        data.put("Contact", rs.getString("contact_no"));
                        data.put("Household", rs.getString("household_serial"));
                        data.put("Worker", rs.getString("worker_incharge"));
                        data.put("Suffix", rs.getString("suffix"));
                        data.put("M_name", rs.getString("m_name"));
                        data.put("Age", rs.getString("r_age"));
                        data.put("B_date", rs.getString("r_birthdate"));
                        data.put("B_place", rs.getString("r_birthplace"));
                        data.put("Religion", rs.getString("r_religion"));
                        data.put("Citizenship", rs.getString("r_citizenship"));
                        data.put("Profession", rs.getString("r_profession"));
                        data.put("Enumer", rs.getString("enumeration_serial"));
                        data.put("Build", rs.getString("building_serial"));
                        data.put("Housing", rs.getString("housing_unit_serial"));
                        data.put("Sex", rs.getString("r_sex"));
                        data.put("Status", rs.getString("r_status"));
                        data.put("Attainment", rs.getString("r_attainment"));
                        data.put("Date_Added", rs.getString("time_created"));
                        data.put("Entry", rs.getString("validation"));

                        close();
                        SHOW_DETAILS show_UI = new SHOW_DETAILS(username, Dbcon, data);
                        show_UI.setVisible(true);
                        show_UI.pack();
                        show_UI.setLocationRelativeTo(null);
                        
                    } else {
                        JOptionPane.showMessageDialog(null, "No data found for the selected email.");
                    }
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error while retrieving data: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "No row selected");
        }
    
    }//GEN-LAST:event_show_dataActionPerformed

    private void record_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_record_tableMouseClicked
    /*String DBUrl = "jdbc:mysql://localhost:3306/user_" + username;
    String DBUser = "root";
    String DBpass = "";
/*
    try {
        int SelectedRows = record_table.getSelectedRow();
        if (SelectedRows == -1) {
            JOptionPane.showMessageDialog(this, "PLEASE SELECT A ROW");
            return;
        }
        
        DefaultTableModel RecordTable = (DefaultTableModel) record_table.getModel();
        String Table_click = RecordTable.getValueAt(SelectedRows, 1).toString(); // Trimmed
        
        System.out.println("Selected email: " + Table_click); // Debugging output
        
        try (java.sql.Connection sqlconn = DriverManager.getConnection(DBUrl, DBUser, DBpass)) {
            // Test with a more general query first
            String query = "SELECT * FROM res_info WHERE respondent_email = ? ORDER BY time_created DESC";
            try (PreparedStatement stmt = sqlconn.prepareStatement(query)) {
                stmt.setString(1, Table_click);
                
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        System.out.println("Data found for email: " + rs.getString("respondent_email")); // Debugging output
                        r_email_adress.setText(rs.getString("respondent_email"));
                        r_first_name.setText(rs.getString("f_name"));
                        r_last_name.setText(rs.getString("l_name"));
                        r_address.setText(rs.getString("address"));
                        r_contact.setText(rs.getString("contact_no"));
                        r_household_serial.setText(rs.getString("household_serial"));
                        inCharge.setText(rs.getString("worker_incharge"));
                        r_suffix.setText(rs.getString("suffix"));
                        r_middle_name.setText(rs.getString("m_name"));
                        r_age.setText(rs.getString("r_age"));
                        r_birthdate.setText(rs.getString("r_birthdate"));
                        r_birthplace.setText(rs.getString("r_birthplace"));
                        r_religion.setText(rs.getString("r_religion"));
                        r_citizenship.setText(rs.getString("r_citizenship"));
                        r_profession.setText(rs.getString("r_profession"));
                        r_enumeration_serial.setText(rs.getString("enumeration_serial"));
                        r_building_serial.setText(rs.getString("building_serial"));
                        r_housing_unit_serial.setText(rs.getString("housing_unit_serial"));
                    } else {
                        System.out.println("No data found for email: " + Table_click); // Debugging output
                        JOptionPane.showMessageDialog(this, "NO DATA FOUND FOR THE CHOSEN RESPONDENT");
                    }
                }
            }
        }
        
    } catch (SQLException ex) {
        ex.printStackTrace(); // Log exception details
        JOptionPane.showMessageDialog(this, "DATABASE ERROR: " + ex.getMessage());
    } catch (HeadlessException ex) {
        JOptionPane.showMessageDialog(this, "ERROR: " + ex.getMessage());
    }


        
        String clickUrl = "jdbc:mysql://localhost:3306/user_" + username;
        
        
        int SelectedRows = record_table.getSelectedRow();     
        RowSorter<? extends TableModel> sorter = record_table.getRowSorter();
        
        // Convert selected row index to model index
        int modelRow = sorter.convertRowIndexToModel(SelectedRows);
        DefaultTableModel RecordTable = (DefaultTableModel)record_table.getModel();
        String Table_click = record_table.getModel().getValueAt(SelectedRows, 1).toString();

        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            Dbcon = DriverManager.getConnection(clickUrl, sUser, spass);
            pst = Dbcon.prepareStatement("SELECT * FROM res_info WHERE respondent_email = '"+Table_click+"'");
            result = pst.executeQuery();

            if(result.next()){
                r_email_adress.setText(result.getString("respondent_email"));
                r_first_name.setText(result.getString("f_name"));
                r_last_name.setText(result.getString("l_name"));
                r_address.setText(result.getString("address"));
                r_contact.setText(result.getString("contact_no"));
                r_household_serial.setText(result.getString("household_serial"));
                inCharge.setText(result.getString("worker_incharge"));
                r_suffix.setText(result.getString("suffix"));
                r_middle_name.setText(result.getString("m_name"));
                r_age.setText(result.getString("r_age"));
                r_birthdate.setText(result.getString("r_birthdate"));
                r_birthplace.setText(result.getString("r_birthplace"));
                r_religion.setText(result.getString("r_religion"));
                r_citizenship.setText(result.getString("r_citizenship"));
                r_profession.setText(result.getString("r_profession"));
                r_address.setText(result.getString("address"));
                r_enumeration_serial.setText(result.getString("enumeration_serial"));
                r_building_serial.setText(result.getString("building_serial"));
                r_housing_unit_serial.setText(result.getString("housing_unit_serial"));
            }else{
                JOptionPane.showMessageDialog(null, "NO DATA FOUND FOR THE CHOSEN RESPONDENT");
            }
        }catch (Exception ex){
            JOptionPane.showMessageDialog(null, ex);
        }*/
    }//GEN-LAST:event_record_tableMouseClicked

    private void worker_labelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_worker_labelMouseClicked
        close();
        SHOW_WHO_WORKER show_UI = new SHOW_WHO_WORKER(username, Dbcon);
        show_UI.setVisible(true);
        show_UI.pack();
        show_UI.setLocationRelativeTo(null);
    }//GEN-LAST:event_worker_labelMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WORKER_DB_FOR_EDIT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WORKER_DB_FOR_EDIT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WORKER_DB_FOR_EDIT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WORKER_DB_FOR_EDIT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WORKER_DB_FOR_EDIT().setVisible(true);
            }
        });
    }
    //Backup code if i wala ang Line 59
    /*
    public static void main(String[] args) {
    // Define database connection parameters
    String username = "root";  // Or dynamically retrieve this, e.g., from a login form
    String password = "";      // Your database password
    String dbName = "your_database_name";  // Replace with your actual database name

    // Create the connection string
    String sUrl = "jdbc:mysql://localhost:3306/" + dbName;

    try {
        // Load and register MySQL JDBC driver
        Class.forName("com.mysql.cj.jdbc.Driver");

        // Establish connection to the database
        Connection sqlcon = DriverManager.getConnection(sUrl, username, password);

        // If connection is successful, you can proceed with your query
        System.out.println("Connection successful!");

        // Example of a query
        Statement st = sqlcon.createStatement();
        String query = "SELECT * FROM your_table_name"; // Replace with your actual table name
        ResultSet rs = st.executeQuery(query);

        // Process results (optional)
        while (rs.next()) {
            System.out.println("Data: " + rs.getString("column_name"));  // Adjust column name as needed
        }

        // Close the connection when done
        sqlcon.close();
        
    } catch (ClassNotFoundException | SQLException ex) {
        // Handle exceptions
        System.out.println("Error: " + ex.getMessage());
    }
}
    */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton admin_forward;
    private javax.swing.JPanel display_panel;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel2;
    public static javax.swing.JTable record_table;
    private javax.swing.JScrollPane record_table_scroll;
    private javax.swing.JTextField search_text_field;
    private javax.swing.JButton show_data;
    private javax.swing.JButton w_add_button;
    private javax.swing.JButton worker_delete_button;
    private javax.swing.JLabel worker_label;
    private javax.swing.JButton worker_search_button;
    private javax.swing.JButton worker_update_button;
    private javax.swing.JButton worker_validate_button;
    // End of variables declaration//GEN-END:variables

    private static class JFrame extends Component {

        public JFrame() {
        }
    }
}
